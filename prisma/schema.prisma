// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



// مدل کاربر (User)
model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  role          Role       @default(CUSTOMER)
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  Wishlist      Wishlist[]
  BlogPost      BlogPost[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  refreshTokens RefreshToken[]
  resetPasswordTokens ResetPasswordToken[]
  verified      Boolean    @default(false)
  verificationToken String?
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER
}

// مدل آدرس (Address)
model Address {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  receiver    String
  phone       String
  city        String
  province    String
  address     String
  postalCode  String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// مدل دسته‌بندی (Category)
model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// مدل محصول (Product)
model Product {
  id            String      @id @default(uuid())
  name          String
  slug          String      @unique

  description   String
  price         Float
  discountPrice Float?
  sku           String?
  stock         Int         @default(0)
  images        Json
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  WishlistItem  WishlistItem[]
  cartItems     CartItem[]
  OrderItem     OrderItem []
  attributes    ProductAttribute[]
  variants      ProductVariant[]
  reviews       Review[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  published     Boolean     @default(false)
  featured      Boolean     @default(false)
}

// مدل ویژگی محصول (ProductAttribute)
model ProductAttribute {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// مدل تنوع محصول (ProductVariant)
model ProductVariant {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  name        String
  options     Json     // ذخیره گزینه‌های مختلف به صورت JSON
  price       Float?
  stock       Int      @default(0)
  sku         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// مدل سبد خرید (Cart)
model Cart {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  items       CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// مدل آیتم سبد خرید (CartItem)
model CartItem {
  id          String   @id @default(uuid())
  cart        Cart     @relation(fields: [cartId], references: [id])
  cartId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int      @default(1)
  variantId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// مدل سفارش (Order)
model Order {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  coupon           Coupon         @relation(fields: [CouponId], references: [id])
  CouponId         String
  orderNumber      String         @unique
  items            OrderItem[]
  shippingAddress  Json           // ذخیره آدرس به صورت JSON
  billingAddress   Json?
  paymentMethod    PaymentMethod
  paymentStatus    PaymentStatus  @default(PENDING)
  paymentId        String?
  shippingMethod   String
  shippingCost     Float
  subtotal         Float
  tax              Float
  total            Float
  status           OrderStatus    @default(PROCESSING)
  trackingNumber   String?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// مدل آیتم سفارش (OrderItem)
model OrderItem {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  productName String
  productImage String
  price       Float
  quantity    Int
  variantId   String?
  variantInfo String?
  createdAt   DateTime @default(now())
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  COD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

// مدل نظر و بررسی (Review)
model Review {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  rating      Int
  title       String?
  comment     String?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// مدل کوپن تخفیف (Coupon)
model Coupon {
  id          String     @id @default(uuid())
  code        String     @unique
  description String?
  discountType DiscountType
  discountValue Float
  minOrder    Float?
  maxDiscount Float?
  startDate   DateTime
  endDate     DateTime
  usageLimit  Int?
  usedCount   Int       @default(0)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

// مدل Wishlist
model Wishlist {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  items       WishlistItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model WishlistItem {
  id          String   @id @default(uuid())
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId  String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime @default(now())
}

// مدل توکن‌های رفرش
model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

// مدل توکن‌های بازنشانی رمز عبور
model ResetPasswordToken {
  id          String   @id @default(uuid())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

// مدل بلاگ (اختیاری)
model BlogPost {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String
  excerpt     String?
  image       String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  published   Boolean    @default(false)
  publishedAt DateTime?
  tags        Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}